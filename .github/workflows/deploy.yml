# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a two jobs called "build" and "deploy"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production  # âœ… This ensures Vue uses the correct NODE_ENV

    permissions:
      contents: read
      pages: write
      id-token: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checkout repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Ensure this matches your project's Node.js version

      - name: Install Vue CLI
        run: npm install -g @vue/cli
          
          
     # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci # Use `npm ci` to install dependencies faster and more securely
      
      - name: Print NODE_ENV  (Before Build)
        run: echo "NODE_ENV is $NODE_ENV"

     # Step 4: Build the Vue app
      - name: Build Vue App
        run: npm run build

        # Step 5: Remove Hard Links and Symlinks
      - name: Remove Hard Links and Symlinks
        run: |
          echo "Replacing symlinks..."
          find dist -type l -exec sh -c 'cp --remove-destination "$1" "$1.tmp" && mv "$1.tmp" "$1"' _ {} \;

          echo "Checking and resolving hard links..."
          find dist -type f -exec ls -i {} + | awk '{print $1, $NF}' | sort | uniq -d | awk '{print $2}' | xargs -I {} sh -c 'cp --remove-destination "$1" "$1.tmp" && mv "$1.tmp" "$1"' _ {}  
       
      - name: Check size of dist folder
        run: |
            echo "Checking total size of dist folder..."
            SIZE=$(du -sh dist | awk '{print $1}')
            echo "Total size of dist folder: $SIZE"
            
            # Convert human-readable size (e.g., 840K, 1M, 2G) into bytes for comparison
            SIZE_IN_BYTES=$(numfmt --from=iec $SIZE)
            MAX_SIZE_IN_BYTES=10737418240  # 10GB in bytes
  
            if [ "$SIZE_IN_BYTES" -gt "$MAX_SIZE_IN_BYTES" ]; then
              echo "Warning: dist folder exceeds 10GB limit!"
            else
              echo "dist folder size is within the acceptable limit."
            fi    
      - name: Check dist folder contents
        run: ls -l dist  # Debugging step to check if dist/ exists

      # Step 5: Upload artifact (build output)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: dist # Upload the `dist` folder as an artifact   

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
        pages: write
        id-token: write
        
    steps:  
    # Step 1: Download artifact
     - name: Download artifact
       uses: actions/download-artifact@v4
       with:
         name: github-pages # Artifact name used here should match the one used in upload
         path: dist  # Ensure the path is correctly specified
     # Step 2: Deploy to GitHub Pages
     - name: Deploy to GitHub Pages
       uses: actions/deploy-pages@v4
      
      

